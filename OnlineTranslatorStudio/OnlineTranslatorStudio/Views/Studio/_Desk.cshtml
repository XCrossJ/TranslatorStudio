@model TranslatorStudioClassLibrary.Class.TranslationData

<div id="desk" class="row">
    <div id="mainDeskSection" class="row">
        <div id="rawSection" class="col-xs-6">
            <div class="row">
                @Html.LabelFor(Model => Model.CurrentRaw, new { @class = "control-label" })
            </div>
            <div class="row">
                @Html.TextAreaFor(Model => Model.CurrentRaw, new { @class = "form-control", style = "max-width: 100%; width: 80%;" })
                @*<p>@Model.CurrentRaw</p>*@
            </div>
        </div>
        <div id="translationSection" class="col-xs-6">
            <div class="row">
                @Html.LabelFor(Model => Model.CurrentTranslation, new { @class = "control-label" })
            </div>
            <div class="row">
                @Html.TextAreaFor(Model => Model.CurrentTranslation, new { @class = "form-control", style = "max-width: 100%; width: 80%;" })
            </div>
            @*<input class="form-control" type="text" value="@Model.CurrentTranslation" />*@
        </div>
    </div>
    <div id="miscSection" class="row">
        <div id="checkSection" class="col-xs-12">
            <label class="checkbox-inline">
                @Html.CheckBoxFor(Model => Model.CurrentMarked, new { @checked = Model.CurrentMarked })
                @Html.DisplayNameFor(Model => Model.CurrentMarked)
            </label>
            <label class="checkbox-inline">
                @Html.CheckBoxFor(Model => Model.CurrentCompletion, new { @checked = Model.CurrentCompletion })
                @Html.DisplayNameFor(Model => Model.CurrentCompletion)
            </label>
        </div>
    </div>
</div>

<script src="~/Javascript/TranslationData.js"></script>
<script src="~/Javascript/TranslationDeskHandler.js"></script>
@{
    var serializer = new System.Web.Script.Serialization.JavaScriptSerializer();
}
<script>
    var projectName = @Html.Raw(serializer.Serialize(Model.ProjectName));
    console.log(projectName);

    var rawLines = new Array;
    rawLines = @Html.Raw(serializer.Serialize(Model.RawLines));
    var translatedLines = new Array;
    translatedLines = @Html.Raw(serializer.Serialize(Model.TranslatedLines));
    var markedLines = new Array;
    markedLines = @Html.Raw(serializer.Serialize(Model.MarkedLines));
    var completedLines = new Array;
    completedLines = @Html.Raw(serializer.Serialize(Model.CompletedLines));

    var projectData = new ProjectData(projectName, rawLines, translatedLines, markedLines, completedLines);
    console.log(projectData);
    var translationData = new TranslationData(projectData);
    console.log(translationData);

    $(document).keydown(function () {
        if ((event.which == 39) & (event.altKey == true) & (event.ctrlKey == true)) {
        //if ((event.which == 39) & (event.ctrlKey == true)) {
            //translationData.IncrementIndex();
            incrementIndex(translationData);
        }
        if ((event.which == 37) & (event.altKey == true) & (event.ctrlKey == true)) {
        //if ((event.which == 37) & (event.ctrlKey == true)) {
            //translationData.DecrementIndex();
            decrementIndex(translationData);
        }
    });

    //function incrementIndexHandler() {
    //    console.log("Hit Increment Index Handler");
    //    incrementIndex(translationData);
    //}

    //function decrementIndexHandler() {
    //    console.log("Hit Decrement Index Handler");
    //    decrementIndex(translationData);
    //}
    

</script>